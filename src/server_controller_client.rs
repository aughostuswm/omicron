/*!
 * Interface for making API requests to a Server Controller.  This should be
 * replaced with a client generated from the OpenAPI spec generated by the
 * server.
 */

use crate::api_error::ApiError;
use crate::api_model::ApiDiskRuntimeState;
use crate::api_model::ApiDiskStateRequested;
use crate::api_model::ApiInstanceRuntimeState;
use crate::api_model::ApiInstanceRuntimeStateRequested;
use crate::http_client::HttpClient;
use async_trait::async_trait;
use http::Method;
use hyper::Body;
use serde::Deserialize;
use serde::Serialize;
use slog::Logger;
use std::net::SocketAddr;
use std::sync::Arc;
use uuid::Uuid;

pub struct ServerControllerClient {
    pub id: Uuid,
    client: HttpClient,
}

/* TODO-cleanup does this belong here? */
#[derive(Serialize, Deserialize)]
pub struct InstanceEnsureBody {
    pub initial_runtime: ApiInstanceRuntimeState,
    pub target: ApiInstanceRuntimeStateRequested,
}

/* TODO-cleanup does this belong here? */
#[derive(Serialize, Deserialize)]
pub struct DiskEnsureBody {
    pub initial_runtime: ApiDiskRuntimeState,
    pub target: ApiDiskStateRequested,
}

impl ServerControllerClient {
    pub fn new(
        id: &Uuid,
        server_addr: SocketAddr,
        log: Logger,
    ) -> ServerControllerClient {
        ServerControllerClient {
            id: id.clone(),
            client: HttpClient::new("server controller", server_addr, log),
        }
    }

    /**
     * Idempotently ensures that the given API Instance exists on this server in
     * the given runtime state (described by `target`).
     */
    pub async fn instance_ensure(
        self: &Arc<Self>,
        instance_id: Uuid,
        initial_runtime: ApiInstanceRuntimeState,
        target: ApiInstanceRuntimeStateRequested,
    ) -> Result<ApiInstanceRuntimeState, ApiError> {
        let path = format!("/instances/{}", instance_id);
        let body = Body::from(
            serde_json::to_string(&InstanceEnsureBody {
                initial_runtime,
                target,
            })
            .unwrap(),
        );
        let mut response =
            self.client.request(Method::PUT, path.as_str(), body).await?;
        /* TODO-robustness handle 300-level? */
        assert!(response.status().is_success());
        let value = self
            .client
            .read_json::<ApiInstanceRuntimeState>(
                &self.client.error_message_base(&Method::PUT, path.as_str()),
                &mut response,
            )
            .await?;
        Ok(value)
    }

    /**
     * Idempotently ensures that the given API Disk is attached (or not) as
     * specified.
     */
    pub async fn disk_ensure(
        self: &Arc<Self>,
        disk_id: Uuid,
        initial_runtime: ApiDiskRuntimeState,
        target: ApiDiskStateRequested,
    ) -> Result<ApiDiskRuntimeState, ApiError> {
        let path = format!("/disks/{}", disk_id);
        let body = Body::from(
            serde_json::to_string(&DiskEnsureBody {
                initial_runtime,
                target,
            })
            .unwrap(),
        );
        let mut response =
            self.client.request(Method::PUT, path.as_str(), body).await?;
        /* TODO-robustness handle 300-level? */
        assert!(response.status().is_success());
        let value = self
            .client
            .read_json::<ApiDiskRuntimeState>(
                &self.client.error_message_base(&Method::PUT, path.as_str()),
                &mut response,
            )
            .await?;
        Ok(value)
    }
}

/**
 * Trait used to expose interfaces for use only by the test suite.
 */
#[async_trait]
pub trait ServerControllerTestInterfaces {
    async fn instance_finish_transition(&self, id: Uuid);
    async fn disk_finish_transition(&self, id: Uuid);
}

#[async_trait]
impl ServerControllerTestInterfaces for ServerControllerClient {
    async fn instance_finish_transition(&self, id: Uuid) {
        let path = format!("/instances/{}/poke", id);
        let body = Body::empty();
        self.client
            .request(Method::POST, path.as_str(), body)
            .await
            .expect("instance_finish_transition() failed unexpectedly");
    }

    async fn disk_finish_transition(&self, id: Uuid) {
        let path = format!("/disks/{}/poke", id);
        let body = Body::empty();
        self.client
            .request(Method::POST, path.as_str(), body)
            .await
            .expect("instance_finish_transition() failed unexpectedly");
    }
}
