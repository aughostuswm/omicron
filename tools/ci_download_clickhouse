#!/bin/bash

#
# ci_download_clickhouse: fetches the appropriate ClickHouse binary tarball
# based on the currently running operating system, unpacks it, and creates a
# copy called "clickhouse", all in the current directory.
#

set -o pipefail
set -o xtrace
set -o errexit

SOURCE_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
ARG0="$(basename ${BASH_SOURCE[0]})"

CIDL_VERSION_FILE="$SOURCE_DIR/clickhouse_versions"
source "$CIDL_VERSION_FILE"
CIDL_ASSEMBLE_DIR="./clickhouse"

# Download from manually-populated S3 bucket for now
CIDL_URL_BASE="https://oxide-clickhouse-build.s3.us-west-2.amazonaws.com"

function per_platform
{
	#
	# We should use "${1^^}" here instead of tr(1), except that Apple, in a
	# thoroughly characteristic fit of user hostility, ship a flagrantly
	# obsolete version of bash that has no features.
	#
	local pp_key="$(tr '[:lower:]' '[:upper:]' <<< "$1")"
	local pp_platform="$(tr '[:lower:]' '[:upper:]' <<< "$2")"
	local pp_varname="CIDL_${pp_key}_${pp_platform}"
	local pp_val="${!pp_varname}"
	if [[ -z "$pp_val" ]]; then
		fail "missing \"$pp_varname\" in \"$CIDL_VERSION_FILE\""
	fi
	printf '%s' "$pp_val"
}

function main
{
	#
	# Process command-line arguments.  We generally don't expect any, but
	# we allow callers to specify a value to override OSTYPE, just for
	# testing.
	#
	if [[ $# != 0 ]]; then
		CIDL_OS="$1"
		shift
	else
		CIDL_OS="$OSTYPE"
	fi

	if [[ $# != 0 ]]; then
		echo "unexpected arguments" >&2
		exit 2
	fi

	# Configure this program
	configure_os "$CIDL_OS"
	CIDL_URL="$CIDL_URL_BASE/$CIDL_FILE"

	echo "URL: $CIDL_URL"
	echo "Local file: $CIDL_FILE"

	#
	# If the file exists already, check to see if the hash matches so that
	# we can avoid a second download.
	#
	if [[ -f "$CIDL_FILE" ]]; then
		calculated_md5="$($CIDL_MD5FUNC "$CIDL_FILE")" || \
		    fail "failed to calculate md5sum"
		if [[ "$calculated_md5" == "$CIDL_MD5" ]]; then
			download=no
		else
			rm -f "$CIDL_FILE"
			download=yes
		fi
	else
		download=yes
	fi

	if [[ "$download" == yes ]]; then
		#
		# Download the file.
		#
		do_download_curl "$CIDL_URL" "$CIDL_FILE" || \
		    fail "failed to download file"

		#
		# Verify the md5sum.
		#
		calculated_md5="$($CIDL_MD5FUNC "$CIDL_FILE")" || \
		    fail "failed to calculate md5sum"
		if [[ "$calculated_md5" != "$CIDL_MD5" ]]; then
			fail "md5sum mismatch \
			    (expected $CIDL_MD5, found $calculated_md5)"
		fi
	fi

	# Unpack the tarball into a local directory
	do_untar "$CIDL_FILE" "$CIDL_ASSEMBLE_DIR"

	# Run the binary as a sanity-check.
	"$CIDL_ASSEMBLE_DIR/clickhouse" server --version
}

function fail
{
	echo "$ARG0: $@" >&2
	exit 1
}

function configure_os
{
	echo "current directory: $PWD"
	echo "configuring based on OS: \"$1\""
	case "$1" in
	darwin*)
		CIDL_PLATFORM="macos"
		CIDL_MD5FUNC="do_md5"
		;;
	linux-gnu*)
		CIDL_PLATFORM="linux"
		CIDL_MD5FUNC="do_md5sum"
		;;
	solaris*)
		CIDL_PLATFORM="illumos"
		CIDL_MD5FUNC="do_md5sum"
		;;
	*)
		fail "unsupported OS: $1"
		;;
	esac

	if ! CIDL_VERSION=$(per_platform version "$CIDL_PLATFORM") ||
	    ! CIDL_MD5=$(per_platform md5 "$CIDL_PLATFORM"); then
		fail "could not configure platform $CIDL_PLATFORM"
	fi

	CIDL_DIR="clickhouse-v$CIDL_VERSION"
	CIDL_FILE="$CIDL_DIR.$CIDL_PLATFORM.tar.gz"
}

function do_download_curl
{
	curl --silent --show-error --fail --location --output "$2" "$1"
}

function do_md5
{
	md5 < "$1"
}

function do_md5sum
{
	md5sum < "$1" | awk '{print $1}'
}

function do_untar
{
    mkdir -p "$2" && tar xzf "$1" -C "$2"
}

main "$@"
